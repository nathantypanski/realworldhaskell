2.1
    Haskell provides a standard function, last :: [a] -> a, that returns the
    last element of a list. From reading the type alone, what are the possible
    valid behaviors (omitting crashes and infinite loops) that this function
    could have? What are a few things that this function clearly cannot do?

Sol.

The function could take a list of elements, and it could retun any element in
the list. Based on the name, it probably returns the last element in the list.

One of the things the function could not do is return more than one element.
Since its type signature constrains it to returning only a single element, 
behavior such as:
    [a] -> [a]
is clearly impossible. Likewise, the function cannot operate on a single
element, even one of type a, that is not in a list.
